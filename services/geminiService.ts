import { GoogleGenAI } from "@google/genai";

interface SummaryResult {
    textSummary: string;
    csvSummary: string;
}

// FIX: Refactored function to remove the apiKey parameter. The key is now securely sourced from environment variables.
export const generateColumnSummary = async (
    analysisColumnName: string, 
    groupingColumnName: string | null,
    data: Record<string, any>[]
): Promise<SummaryResult> => {
  // FIX: Per @google/genai guidelines, the API key must be obtained from process.env.API_KEY.
  // The '!' non-null assertion is used based on the guideline to assume the key is always available.
  const ai = new GoogleGenAI({ apiKey: process.env.API_KEY! });

  let prompt: string;

  if (groupingColumnName) {
     const relevantData = data.slice(0, 200).map(row => ({
        [analysisColumnName]: row[analysisColumnName],
        [groupingColumnName]: row[groupingColumnName]
    }));

    prompt = `
Voc√™ √© um especialista em an√°lise de dados. Sua tarefa √© analisar a coluna "${analysisColumnName}", agrupando os resultados pela coluna "${groupingColumnName}". Gere DOIS resultados distintos: um resumo textual bem formatado e um arquivo CSV.

DADOS PARA AN√ÅLISE (amostra de at√© 200 linhas):
---
${JSON.stringify(relevantData, null, 2)}
---

TAREFA 1: GERAR RESUMO TEXTUAL
Analise os dados e, para cada grupo encontrado em "${groupingColumnName}", crie um resumo claro e profissional. Se houver muitos grupos, foque nos 3 com maior volume de dados.

REGRAS DE FORMATA√á√ÉO PARA O RESUMO TEXTUAL:
1. Antes de cada t√≠tulo, adicione uma linha divis√≥ria exata: ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
2. O t√≠tulo do grupo deve ser em MAI√öSCULAS, precedido por um emoji relevante (ex: üìà).
3. Siga esta estrutura fixa para cada grupo:
   - Pontos Positivos:
     ‚Ä¢ [liste aqui de 2 a 4 pontos positivos relevantes]
   - Pontos Negativos:
     ‚Ä¢ [liste aqui de 2 a 4 pontos negativos relevantes]
   - Resumo:
     [um par√°grafo conciso com as principais conclus√µes]
4. Use bom espa√ßamento, com uma linha em branco entre cada se√ß√£o (t√≠tulo, divis√≥ria, Pontos Positivos, etc.).
5. O estilo do texto deve ser limpo, corporativo e de f√°cil leitura, sem formata√ß√£o extra como negrito ou it√°lico.

EXEMPLO DE SA√çDA PARA M√öLTIPLOS GRUPOS:
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üìà MARKETING

Pontos Positivos:
‚Ä¢ Utiliza√ß√£o de tecnologias modernas e alinhadas ao mercado.
‚Ä¢ Desenvolvimento de projetos inovadores com boa aceita√ß√£o.
‚Ä¢ Equipe criativa e com bom conhecimento t√©cnico.

Pontos Negativos:
‚Ä¢ A gest√£o de projetos poderia ser mais transparente.
‚Ä¢ A infraestrutura de TI apresenta limita√ß√µes para grandes campanhas.
‚Ä¢ Falta de comunica√ß√£o clara sobre as metas de longo prazo.

Resumo:
O setor de Marketing apresenta como pontos fortes tecnologias modernas e projetos inovadores, mas enfrenta desafios com a falta de transpar√™ncia na gest√£o e infraestrutura limitada.


‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üí° VENDAS

Pontos Positivos:
‚Ä¢ Equipe altamente motivada e proativa.
‚Ä¢ √ìtimo relacionamento interpessoal com os clientes.

Pontos Negativos:
‚Ä¢ As metas de vendas s√£o percebidas como pouco realistas.
‚Ä¢ Ferramentas de CRM est√£o desatualizadas.
‚Ä¢ Necessidade de maior treinamento em novos produtos.

Resumo:
O time de Vendas √© forte e motivado, mas as metas precisam ser reavaliadas e as ferramentas atualizadas para garantir sustentabilidade.

TAREFA 2: GERAR ARQUIVO CSV
Crie uma string CSV com as colunas: "area de atuacao", "nome", "comentario", "elogio".
- area de atuacao: O valor correspondente da coluna "${groupingColumnName}".
- nome: O tema principal identificado no coment√°rio (ex: "Sal√°rio", "Cultura", "Comunica√ß√£o").
- comentario: Um resumo conciso do feedback.
- elogio: Responda com "1" se for um feedback positivo, ou "0" se for negativo.
A primeira linha do CSV deve ser o cabe√ßalho, e n√£o deve haver formata√ß√£o extra.

FORMATO DE SA√çDA OBRIGAT√ìRIO:
A sa√≠da deve conter o resumo textual da TAREFA 1 primeiro.
Em uma nova linha, coloque o separador exato: ---CSV_START---
Logo ap√≥s o separador, insira o conte√∫do CSV da TAREFA 2.
    `;
  } else {
    const columnData = data
        .map((row) => row[analysisColumnName])
        .filter((value) => value !== null && value !== undefined && value.toString().trim() !== '');
    
    if (columnData.length === 0) {
        // FIX: Corrected a critical syntax error. The backtick was escaped (\`), breaking the template string and causing numerous downstream parsing errors.
        throw new Error(`A coluna "${analysisColumnName}" est√° vazia ou n√£o cont√©m dados v√°lidos.`);
    }

    const columnContent = columnData.slice(0, 500).join('\n');

    prompt = `
Voc√™ √© um especialista em an√°lise de dados. Sua tarefa √© analisar o conte√∫do da coluna "${analysisColumnName}" e gerar DOIS resultados: um resumo textual bem formatado e um arquivo CSV.

DADOS PARA AN√ÅLISE (amostra de at√© 500 linhas da coluna):
---
${columnContent}
---

TAREFA 1: GERAR RESUMO TEXTUAL
Analise o conte√∫do fornecido e apresente um resumo claro e objetivo.

REGRAS DE FORMATA√á√ÉO PARA O RESUMO TEXTUAL:
1. Comece com uma linha divis√≥ria exata: ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
2. Na linha seguinte, coloque o t√≠tulo exato: üí° RESUMO GERAL DA AN√ÅLISE
3. Siga esta estrutura fixa:
   - Pontos Positivos:
     ‚Ä¢ [liste aqui de 3 a 5 pontos positivos relevantes]
   - Pontos Negativos:
     ‚Ä¢ [liste aqui de 3 a 5 pontos negativos relevantes]
   - Resumo:
     [um par√°grafo conciso com as principais conclus√µes]
4. Deixe uma linha em branco entre as se√ß√µes para melhor legibilidade.
5. O estilo do texto deve ser limpo e profissional, sem formata√ß√£o adicional como negrito ou it√°lico.

EXEMPLO DE RESULTADO ESPERADO:
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üí° RESUMO GERAL DA AN√ÅLISE

Pontos Positivos:
‚Ä¢ Feedbacks muito positivos sobre o ambiente de trabalho colaborativo.
‚Ä¢ Elogios recorrentes √† gest√£o, considerada justa e acess√≠vel.
‚Ä¢ Boa percep√ß√£o sobre a colabora√ß√£o e sinergia entre as equipes.
‚Ä¢ V√°rios coment√°rios mencionam oportunidades de crescimento.

Pontos Negativos:
‚Ä¢ Sugest√µes consistentes de melhoria nos sal√°rios e no pacote de benef√≠cios.
‚Ä¢ Cr√≠ticas sobre a falta de comunica√ß√£o clara em projetos interdepartamentais.
‚Ä¢ Alguns coment√°rios apontam para a necessidade de melhores equipamentos.
‚Ä¢ Processos internos s√£o vistos como burocr√°ticos por parte da equipe.

Resumo:
A an√°lise geral dos coment√°rios indica uma percep√ß√£o majoritariamente positiva em rela√ß√£o ao ambiente e gest√£o, com oportunidades claras de aprimoramento na pol√≠tica de remunera√ß√£o, na comunica√ß√£o interna e na moderniza√ß√£o de equipamentos e processos.

TAREFA 2: GERAR ARQUIVO CSV
Crie uma string CSV com as colunas: "nome", "area de atuacao", "comentario", "elogio".
- nome: O tema principal identificado no coment√°rio (ex: "Sal√°rio", "Cultura", "Comunica√ß√£o").
- area de atuacao: Preencha com "Geral".
- comentario: Um resumo conciso do feedback.
- elogio: Responda com "1" se for um feedback positivo, ou "0" se for negativo.
A primeira linha do CSV deve ser o cabe√ßalho, e n√£o deve haver formata√ß√£o extra.

FORMATO DE SA√çDA OBRIGAT√ìRIO:
A sa√≠da deve conter o resumo textual da TAREFA 1 primeiro.
Em uma nova linha, coloque o separador exato: ---CSV_START---
Logo ap√≥s o separador, insira o conte√∫do CSV da TAREFA 2.
    `;
  }

  try {
    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: prompt,
    });
    
    const rawText = response.text;
    const parts = rawText.split('---CSV_START---');
    
    const textSummary = (parts[0] || '').trim();
    let csvSummary = (parts[1] || '').trim();
    
    const cleanCsvString = (text: string): string => {
      const match = text.match(/```(?:csv\n)?([\s\S]*?)```/);
      return match ? match[1].trim() : text.trim();
    };

    csvSummary = cleanCsvString(csvSummary);
    
    if (!textSummary && !csvSummary) {
        throw new Error("A resposta da IA est√° vazia ou em um formato inesperado.");
    }

    return { textSummary, csvSummary };

  } catch (error) {
    console.error("Erro ao chamar a API do Gemini:", error);
    // FIX: Updated error message to be more relevant now that the API key is handled by environment variables.
    throw new Error("N√£o foi poss√≠vel gerar o resumo. Verifique a configura√ß√£o da API e suas permiss√µes de uso.");
  }
};
import { GoogleGenAI } from "@google/genai";

interface SummaryResult {
    textSummary: string;
    csvSummary: string;
}

export const generateColumnSummary = async (
    apiKey: string,
    analysisColumnName: string, 
    groupingColumnName: string | null,
    data: Record<string, any>[]
): Promise<SummaryResult> => {
  if (!apiKey) {
    throw new Error("A chave da API do Gemini n√£o foi fornecida.");
  }
  
  const ai = new GoogleGenAI({ apiKey });

  let prompt: string;

  if (groupingColumnName) {
     const relevantData = data.slice(0, 200).map(row => ({
        [analysisColumnName]: row[analysisColumnName],
        [groupingColumnName]: row[groupingColumnName]
    }));

    prompt = `
Voc√™ √© um especialista em an√°lise de dados. Analise a coluna "${analysisColumnName}", agrupando os resultados pela coluna "${groupingColumnName}". Gere DOIS resultados: um resumo textual e um CSV.

DADOS PARA AN√ÅLISE (amostra de at√© 200 linhas):
---
${JSON.stringify(relevantData, null, 2)}
---

TAREFA 1: GERAR RESUMO TEXTUAL
Analise os dados e, para cada grupo em "${groupingColumnName}", forne√ßa um resumo claro e profissional. Se houver muitos grupos, concentre-se nos 3 com maior volume.

REGRAS DE FORMATA√á√ÉO PARA O RESUMO:
1. T√≠tulo do grupo em mai√∫sculas, precedido por um emoji e envolto por h√≠fens para destaque (exemplo: --- üü¶ MARKETING ---).
2. Estrutura fixa para cada grupo:
   - Pontos Positivos:
     ‚Ä¢ [lista de aspectos positivos]
   - Pontos Negativos:
     ‚Ä¢ [lista de aspectos negativos]
   - Resumo:
     [texto resumindo as principais conclus√µes]
3. Deixe uma linha em branco entre se√ß√µes para melhor legibilidade.
4. O estilo deve ser limpo, corporativo e f√°cil de ler, sem negrito, it√°lico ou outros s√≠mbolos de formata√ß√£o.

Exemplo de sa√≠da para m√∫ltiplos grupos:
--- üü¶ MARKETING ---
Pontos Positivos:
‚Ä¢ Benef√≠cios atrativos e projetos inovadores.

Pontos Negativos:
‚Ä¢ Comunica√ß√£o interna deficiente e pouca clareza nas metas.

Resumo:
O setor de Marketing apresenta bons benef√≠cios e inova√ß√£o, mas enfrenta falhas na comunica√ß√£o e nas metas.

--- üü© TI ---
Pontos Positivos:
‚Ä¢ Ambiente colaborativo e uso de tecnologias modernas.

Pontos Negativos:
‚Ä¢ Carga hor√°ria elevada e falta de reconhecimento.

Resumo:
A TI √© elogiada pelo ambiente e inova√ß√£o, mas precisa equilibrar carga de trabalho e valoriza√ß√£o.

TAREFA 2: GERAR ARQUIVO CSV
Crie uma string CSV simples com as colunas: "area de atuacao", "nome", "comentario", "elogio?".
- area de atuacao: valor de "${groupingColumnName}".
- nome: tema principal identificado (ex: "Sal√°rio", "Cultura", "Comunica√ß√£o").
- comentario: resumo conciso do feedback.
- elogio?: "Sim" se positivo, "N√£o" se negativo.
A primeira linha deve ser o cabe√ßalho e o CSV n√£o pode ter formata√ß√£o extra.

FORMATO DE SA√çDA OBRIGAT√ìRIO:
Primeiro, o resumo textual da TAREFA 1.
Na linha seguinte, o separador exato: ---CSV_START---
Depois, o conte√∫do CSV da TAREFA 2.
    `;
  } else {
    const columnData = data
        .map((row) => row[analysisColumnName])
        .filter((value) => value !== null && value !== undefined && value.toString().trim() !== '');
    
    if (columnData.length === 0) {
        throw new Error(`A coluna "${analysisColumnName}" est√° vazia ou n√£o cont√©m dados v√°lidos.`);
    }

    const columnContent = columnData.slice(0, 500).join('\n');

    prompt = `
Voc√™ √© um especialista em an√°lise de dados. Analise o conte√∫do da coluna "${analysisColumnName}" e gere DOIS resultados: um resumo textual e um CSV.

DADOS PARA AN√ÅLISE (amostra de at√© 500 linhas):
---
${columnContent}
---

TAREFA 1: GERAR RESUMO TEXTUAL
Analise o conte√∫do e apresente um resumo claro e objetivo.

REGRAS DE FORMATA√á√ÉO:
1. Comece com um t√≠tulo destacado: --- üìä RESUMO GERAL DA AN√ÅLISE ---
2. Estrutura:
   - Pontos Positivos:
     ‚Ä¢ [itens positivos]
   - Pontos Negativos:
     ‚Ä¢ [itens negativos]
   - Resumo:
     [s√≠ntese geral]
3. Separe as se√ß√µes com linhas em branco e sem formata√ß√µes especiais (negrito, it√°lico, etc.).
4. Estilo deve ser profissional, direto e bem espa√ßado.

Exemplo:
--- üìä RESUMO GERAL DA AN√ÅLISE ---
Pontos Positivos:
‚Ä¢ Feedbacks positivos sobre o ambiente e a gest√£o.

Pontos Negativos:
‚Ä¢ Sugest√µes de melhoria nos sal√°rios e na comunica√ß√£o.

Resumo:
A percep√ß√£o geral √© positiva, com oportunidades de melhoria em remunera√ß√£o e comunica√ß√£o.

TAREFA 2: GERAR ARQUIVO CSV
Crie uma string CSV com as colunas: "nome", "area de atuacao", "comentario", "elogio?".
- nome: tema principal identificado.
- area de atuacao: "Geral".
- comentario: resumo conciso do feedback.
- elogio?: "Sim" se positivo, "N√£o" se negativo.
A primeira linha deve ser o cabe√ßalho.

FORMATO DE SA√çDA OBRIGAT√ìRIO:
Primeiro, o resumo textual da TAREFA 1.
Na linha seguinte, o separador exato: ---CSV_START---
Depois, o conte√∫do CSV da TAREFA 2.
    `;
  }

  try {
    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: prompt,
    });
    
    const rawText = response.text;
    const parts = rawText.split('---CSV_START---');
    
    const textSummary = (parts[0] || '').trim();
    let csvSummary = (parts[1] || '').trim();
    
    const cleanCsvString = (text: string): string => {
      const match = text.match(/```(?:csv\n)?([\s\S]*?)```/);
      return match ? match[1].trim() : text.trim();
    };

    csvSummary = cleanCsvString(csvSummary);
    
    if (!textSummary && !csvSummary) {
        throw new Error("A resposta da IA est√° vazia ou em um formato inesperado.");
    }

    return { textSummary, csvSummary };

  } catch (error) {
    console.error("Erro ao chamar a API do Gemini:", error);
    throw new Error("N√£o foi poss√≠vel gerar o resumo. Verifique se sua chave de API est√° correta e tem permiss√µes de uso.");
  }
};